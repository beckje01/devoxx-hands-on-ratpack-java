/*
 * This file is generated by jOOQ.
*/
package lab07.jooq.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lab07.jooq.Keys;
import lab07.jooq.Lab07;
import lab07.jooq.tables.records.BookRecord;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Book extends TableImpl<BookRecord> {

    private static final long serialVersionUID = 1931310650;

    /**
     * The reference instance of <code>lab07.book</code>
     */
    public static final Book BOOK = new Book();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookRecord> getRecordType() {
        return BookRecord.class;
    }

    /**
     * The column <code>lab07.book.isbn</code>.
     */
    public final TableField<BookRecord, String> ISBN = createField("isbn", org.jooq.impl.SQLDataType.CHAR.length(13).nullable(false), this, "");

    /**
     * The column <code>lab07.book.quantity</code>.
     */
    public final TableField<BookRecord, Integer> QUANTITY = createField("quantity", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lab07.book.price</code>.
     */
    public final TableField<BookRecord, BigDecimal> PRICE = createField("price", org.jooq.impl.SQLDataType.DECIMAL.precision(15, 2), this, "");

    /**
     * The column <code>lab07.book.title</code>.
     */
    public final TableField<BookRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "");

    /**
     * The column <code>lab07.book.author</code>.
     */
    public final TableField<BookRecord, String> AUTHOR = createField("author", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>lab07.book.publisher</code>.
     */
    public final TableField<BookRecord, String> PUBLISHER = createField("publisher", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * Create a <code>lab07.book</code> table reference
     */
    public Book() {
        this("book", null);
    }

    /**
     * Create an aliased <code>lab07.book</code> table reference
     */
    public Book(String alias) {
        this(alias, BOOK);
    }

    private Book(String alias, Table<BookRecord> aliased) {
        this(alias, aliased, null);
    }

    private Book(String alias, Table<BookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lab07.LAB07;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BookRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BookRecord>> getKeys() {
        return Arrays.<UniqueKey<BookRecord>>asList(Keys.CONSTRAINT_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Book as(String alias) {
        return new Book(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Book rename(String name) {
        return new Book(name, null);
    }
}
